{"version":3,"sources":["index.js"],"names":["wasm_url","document","getElementById","getAttribute","importObj","module","env","_Znaj","x","WebAssembly","instantiateStreaming","fetch","then","res","arr","typed_arr","Int32Array","instance","exports","memory","buffer","length","set","console","log","_sum","offset","_duplicate_arr"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,YAAhC,CAA6C,KAA7C,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,MAAM,EAAE,EADM;AAEdC,EAAAA,GAAG,EAAE;AACDC,IAAAA,KAAK,EAAE,eAACC,CAAD,EAAO;AACV,aAAO,GAAP;AACH;AAHA;AAFS,CAAlB;AASAC,WAAW,CAACC,oBAAZ,CAAiCC,KAAK,CAACX,QAAD,CAAtC,EAAkDI,SAAlD,EACKQ,IADL,CACU,UAAAC,GAAG,EAAI;AACT,MAAMC,GAAG,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,EAAnB,CAAZ;AACA,MAAIC,SAAS,GAAG,IAAIC,UAAJ,CAAeH,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,MAA3C,EAAmD,CAAnD,EAAsDN,GAAG,CAACO,MAA1D,CAAhB;AACAN,EAAAA,SAAS,CAACO,GAAV,CAAcR,GAAd;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqBO,IAArB,CAA0B,CAA1B,EAA6BV,SAAS,CAACM,MAAvC,CAAZ;;AAEA,MAAMK,MAAM,GAAGb,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqBS,cAArB,CAAoC,CAApC,EAAuCZ,SAAS,CAACM,MAAjD,CAAf;;AACAN,EAAAA,SAAS,GAAG,IAAIC,UAAJ,CAAeH,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,MAA3C,EAAmDM,MAAnD,EAA2DX,SAAS,CAACM,MAAV,GAAmB,CAA9E,CAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqBO,IAArB,CAA0BC,MAA1B,EAAkCX,SAAS,CAACM,MAA5C,CAAZ;AACH,CAbL","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["const wasm_url = document.getElementById('wasm').getAttribute('src');\r\n\r\n/*\r\nint sum(int*arr, unsigned int l) {\r\n  int r = 0;\r\n  for (int i = 0; i < l; i++) {\r\n    r += arr[i];\r\n  }\r\n  return r;\r\n}\r\n\r\nint*duplicate_arr(int*arr, unsigned int l) {\r\n  int*new_arr = new int[l*2];\r\n  for (unsigned int i = 0; i < l*2; i+=2) {\r\n    new_arr[i] = arr[i / 2];\r\n    new_arr[i+1] = arr[i / 2] * 2;\r\n  }\r\n  return new_arr;\r\n}\r\n */\r\n\r\nconst importObj = {\r\n    module: {},\r\n    env: {\r\n        _Znaj: (x) => {\r\n            return 120;\r\n        }\r\n    }\r\n};\r\n\r\nWebAssembly.instantiateStreaming(fetch(wasm_url), importObj)\r\n    .then(res => {\r\n        const arr = [1,2,3,4,5,6,7,8,9,10];\r\n        let typed_arr = new Int32Array(res.instance.exports.memory.buffer, 0, arr.length);\r\n        typed_arr.set(arr);\r\n        console.log(typed_arr);\r\n        \r\n        console.log(res.instance.exports._sum(0, typed_arr.length));\r\n\r\n        const offset = res.instance.exports._duplicate_arr(0, typed_arr.length);\r\n        typed_arr = new Int32Array(res.instance.exports.memory.buffer, offset, typed_arr.length * 2);\r\n        console.log(typed_arr);\r\n        console.log(res.instance.exports._sum(offset, typed_arr.length));\r\n    });"]}