{"version":3,"sources":["Logger.js","Wasm.js","index.js"],"names":["Logger","constructor","id","el","document","getElementById","innerHTML","log","data","message","length","JSON","stringify","Wasm","_buffer","_buffer_offset","_functions","init","buffer","functions","call","f_name","args","r_type","map","val","Array","isArray","array","arr","create_typed_array","type","byteLength","Error","result","to_array","from","malloc","size","offset","array_or_length","array_types","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","toLowerCase","Object","keys","join","typed_array","set","url","importObj","wasm","env","entries","reduce","res","name","value","bind","WebAssembly","instantiateStreaming","fetch","then","r","catch","response","arrayBuffer","bytes","instantiate","instance","exports","memory","key","wasm_url","getAttribute","logger","module","w","new_arr"],"mappings":"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","file":"src.e31bb0bc.js","sourceRoot":"..\\src","sourcesContent":["export default class Logger {\r\n    constructor(id) {\r\n        this.el = document.getElementById(id);\r\n        this.el.innerHTML = '';\r\n    }\r\n\r\n    log(data, message = \"\") {\r\n        if(message.length > 0) {\r\n            message += \":\";\r\n        }\r\n\r\n        this.el.innerHTML += `<pre>${message} ${JSON.stringify(data)}</pre>`;\r\n    }\r\n}","class Wasm {\r\n    _buffer;\r\n    _buffer_offset = 0;\r\n    _functions;\r\n\r\n    constructor() {\r\n        //\r\n    }\r\n\r\n    init(data) {\r\n        this._buffer = data.buffer;\r\n        this._functions = data.functions;\r\n        return this;\r\n    }\r\n\r\n    //ToDo add typed arrays to args\r\n    call(f_name, args, r_type = {}) {\r\n        args = args.map(val => {\r\n            if (typeof val === 'number') {\r\n                return val;\r\n            } else if (Array.isArray(val.array)) {\r\n                const arr = create_typed_array(val.type, this._buffer, this._buffer_offset, val.array);\r\n                this._buffer_offset += arr.byteLength;\r\n                return this._buffer_offset - arr.byteLength;\r\n            }\r\n            throw new Error(`Unsupported variable type`)\r\n        });\r\n\r\n        let result = this._functions[f_name](...args);\r\n        if (r_type.type && r_type.length) {\r\n            result = create_typed_array(r_type.type, this._buffer, result, r_type.length);\r\n            if (r_type.to_array) {\r\n                result = Array.from(result);\r\n            }\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    malloc(size) {\r\n        this._buffer_offset += size;\r\n        return this._buffer_offset - size;\r\n    }\r\n}\r\n\r\nconst create_typed_array = (type, buffer, offset = 0, array_or_length) => {\r\n    const array_types = {\r\n        'int8': Int8Array,\r\n        'uint8': Uint8Array,\r\n        'int16': Int16Array,\r\n        'uint16': Uint16Array,\r\n        'int32': Int32Array,\r\n        'uint32': Uint32Array,\r\n        'float32': Float32Array,\r\n        'float64': Float64Array,\r\n        'bigint64': BigInt64Array,\r\n        'biguint64': BigUint64Array,\r\n    };\r\n\r\n    type = array_types[type.toLowerCase()];\r\n\r\n    if (!type) {\r\n        throw new Error(`Array types: ${Object.keys(array_types).join(', ')}. ${type.toLowerCase()} not included`)\r\n    }\r\n\r\n    const typed_array = new type(buffer, offset, Array.isArray(array_or_length) ? array_or_length.length : array_or_length);\r\n    if (array_or_length.length && array_or_length.length > 0) {\r\n        typed_array.set(array_or_length);\r\n    }\r\n    return typed_array;\r\n};\r\n\r\nexport default async (url, importObj = {}) => {\r\n    const wasm = new Wasm();\r\n\r\n    if (importObj.functions) {\r\n        if (!importObj.env) {\r\n            importObj.env = {}\r\n        }\r\n\r\n        const functions = Object.entries(importObj.functions).reduce((res, [name, value]) => {\r\n            if (typeof value === 'string' && wasm[value]) {\r\n                res[name] = wasm[value].bind(wasm);\r\n            }\r\n            if (typeof value === 'function') {\r\n                res[name] = value\r\n            }\r\n            return res;\r\n        }, {});\r\n\r\n        importObj.env = {...functions, ...importObj.env};\r\n    }\r\n\r\n    const data = await WebAssembly.instantiateStreaming(fetch(url), importObj)\r\n        .then(r => r)\r\n        .catch(() => {\r\n            return fetch(url)\r\n                .then(response => response.arrayBuffer())\r\n                .then(bytes => WebAssembly.instantiate(bytes, importObj))\r\n                .then(r => r);\r\n        });\r\n\r\n    return wasm.init({\r\n        // module: data.module,\r\n        buffer: data.instance.exports.memory.buffer,\r\n        functions: Object.entries(data.instance.exports).reduce((res, [key, value]) => {\r\n            return key === 'memory' ? res : {...res, ...{[key]: value}};\r\n        }, {})\r\n    });\r\n}","import Logger from './Logger';\r\nimport wasm from './Wasm';\r\n\r\nconst wasm_url = document.getElementById('wasm').getAttribute('src');\r\n\r\n/*\r\nint _sum(int*arr, unsigned int l) {\r\n  int r = 0;\r\n  for (int i = 0; i < l; i++) {\r\n    r += arr[i];\r\n  }\r\n  return r;\r\n}\r\n\r\nint* _duplicate_arr(int*arr, unsigned int l) {\r\n  int*new_arr = new int[l*2];\r\n  for (unsigned int i = 0; i < l*2; i+=2) {\r\n    new_arr[i] = arr[i / 2];\r\n    new_arr[i+1] = arr[i / 2] * 2;\r\n  }\r\n  return new_arr;\r\n}\r\n */\r\nconst logger = new Logger('log');\r\n\r\nconst importObj = {\r\n    module: {},\r\n    functions: {\r\n        '_Znaj': 'malloc'\r\n    }\r\n};\r\n\r\nconst arr = [1,10];\r\n\r\n(async () => {\r\n    const w = await wasm(wasm_url, importObj);\r\n\r\n    logger.log(arr, 'Маccив');\r\n    logger.log(w.call('_sum', [{array: arr, type: 'Int32'}, arr.length]), 'Сумма его элементов');\r\n\r\n    let new_arr = w.call('_duplicate_arr',\r\n        [{array: arr, type: 'Int32'}, arr.length],\r\n        {type: 'int32', length: arr.length * 2, to_array: true});\r\n    logger.log(new_arr, 'Новый массив возвращенный из C++ функции');\r\n    logger.log(w.call('_sum', [{array: new_arr, type: 'Int32'}, new_arr.length]), 'Сумма его элементов');\r\n})();"]}